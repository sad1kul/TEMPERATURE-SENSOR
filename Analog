apt-get install git
git clone git://github.com/adafruit/Adafruit_Python_CharLCD
cd Adafruit_Python_CharLCD


sudo python setup.py install
sudo nano /boot/config.txt

sudo reboot


sudo modprobe w1â€“gpio
sudo modprobe w1-therm.
cd /sys/bus/w1/devices
ls


cd 28-Device cat w1_slave

import time 
import Adafruit_CharLCD as LCD 
import os 
import glob 
lcd_rs        = 7  
lcd_en        = 8  
lcd_d4        = 25 
lcd_d5        = 24 
lcd_d6        = 23 
lcd_d7        = 18 
lcd_backlight =  0  

lcd_columns = 16 
lcd_rows    = 2 

lcd = LCD.Adafruit_CharLCD(lcd_rs, lcd_en, lcd_d4, lcd_d5, lcd_d6, lcd_d7,
     lcd_columns, lcd_rows, lcd_backlight)
     
lcd.message('DS18B20 with Pi \n -CircuitDigest')
time.sleep(2)
     
def get_temp():
    file = open(device_file, 'r') 
    lines = file.readlines() 
    file.close() 
             
    trimmed_data = lines[1].find('t=') 
               
    if trimmed_data != -1:
        temp_string = lines[1][trimmed_data+2:] 
        temp_c = float(temp_string) / 1000.0 
        return temp_c 
        
        
   while 1: 
    lcd.clear() 
    lcd.message ('Temp = %.1f C' % get_temp()) 
    time.sleep(1) 
    
    
    #main code
    
import time 
import Adafruit_CharLCD as LCD 

import os 

import glob 

 

 

lcd_rs        = 7  

lcd_en        = 8 

lcd_d4        = 25 

lcd_d5        = 24 

lcd_d6        = 23 

lcd_d7        = 18 
lcd_backlight =  0  

 

lcd_columns = 16 

lcd_rows    = 2 

 

lcd = LCD.Adafruit_CharLCD(lcd_rs, lcd_en, lcd_d4, lcd_d5, lcd_d6, lcd_d7, 

                           lcd_columns, lcd_rows, lcd_backlight)   

 

lcd.message('DS18B20 with Pi \n -CircuitDigest') 

 

time.sleep(2) 

 

 

os.system('modprobe w1-gpio') 

os.system('modprobe w1-therm')

 

base_dir = '/sys/bus/w1/devices/'

device_folder = glob.glob(base_dir + '28*')[0]

device_file = device_folder + '/w1_slave'

 

 

def get_temp(): 
    file = open(device_file, 'r') 

    lines = file.readlines() 

    file.close() 

 

    trimmed_data = lines[1].find('t=') 

 

    if trimmed_data != -1:

        temp_string = lines[1][trimmed_data+2:] 

        temp_c = float(temp_string) / 1000.0 

        return temp_c 

 

    

 

while 1: 

 

    lcd.clear() 
    lcd.message ('Temp = %.1f C' % get_temp()) 

 

    time.sleep(1) 

